import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import Cookies from 'js-cookie';
import { RootState, AppThunk } from '../../app/store';
import { userType } from '../../types';

export interface userState {
    userType: userType;
    loggedIn: boolean;
  }
  
  const initialState: userState = {
    userType: 'Agency',
    loggedIn: false
  };

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      // Use the PayloadAction type to declare the contents of `action.payload`
      setUserType: (state, action: PayloadAction<userType>) => {
        state.userType = action.payload;
      },
      login: (state) => {
        state.loggedIn = true;
      },
      logout: (state) => {
        state.loggedIn = false;
        state.userType = 'Agency';
        Cookies.remove('userType')
      }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = 'loading';
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = 'idle';
    //       state.value += action.payload;
    //     })
    //     .addCase(incrementAsync.rejected, (state) => {
    //       state.status = 'failed';
    //     });
    // },
  });
  
  export const { setUserType, login, logout } = userSlice.actions;
  
  // The function below is called a selector and allows us to select a value from
  // the state. Selectors can also be defined inline where they're used instead of
  // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
  export const selectUser = (state: RootState) => state.user.userType;
  export const selectLoggedIn = (state: RootState) => state.user.loggedIn
  
  // We can also write thunks by hand, which may contain both sync and async logic.
  // Here's an example of conditionally dispatching actions based on current state.
//   export const incrementIfOdd =
//     (amount: number): AppThunk =>
//     (dispatch, getState) => {
//       const currentValue = selectCount(getState());
//       if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//       }
//     };
  
  export default userSlice.reducer;
  